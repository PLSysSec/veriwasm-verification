	.intel_syntax noprefix

	.section	.text
	.align	16
	.globl ssl_EncodeUintX
	.type ssl_EncodeUintX, @function
ssl_EncodeUintX:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	sub	rsp, 0x30 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x18], rdi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x20], rsi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	dword ptr [rbp - 0x24], edx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr fs:[0x28] # Size:9, Opcode: 0x8b,0x00,0x00,0x00
	mov	qword ptr [rbp - 8], rax # Size:4, Opcode: 0x89,0x00,0x00,0x00
	xor	eax, eax # Size:2, Opcode: 0x31,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x20] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rdi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	PR_htonll # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x10], rax # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	edx, dword ptr [rbp - 0x24] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rbp - 0x24] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	ecx, 8 # Size:5, Opcode: 0xb9,0x00,0x00,0x00
	sub	rcx, rax # Size:3, Opcode: 0x29,0x00,0x00,0x00
	lea	rax, qword ptr [rbp - 0x10] # Size:4, Opcode: 0x8d,0x00,0x00,0x00
	add	rcx, rax # Size:3, Opcode: 0x01,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rsi, rcx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rdi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	memcpy # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	nop	 # Size:1, Opcode: 0x90,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	xor	rax, qword ptr fs:[0x28] # Size:9, Opcode: 0x33,0x00,0x00,0x00
	je	.label_9 # Size:2, Opcode: 0x74,0x00,0x00,0x00
	call	__stack_chk_fail # Size:5, Opcode: 0xe8,0x00,0x00,0x00
.label_9:
	leave	 # Size:1, Opcode: 0xc9,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00

	.section	.text
	.align	16
	.globl sslBuffer_Grow
	.type sslBuffer_Grow, @function
sslBuffer_Grow:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	sub	rsp, 0x20 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x18], rdi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	dword ptr [rbp - 0x1c], esi # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rax + 0x10] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	test	eax, eax # Size:2, Opcode: 0x85,0x00,0x00,0x00
	je	.label_13 # Size:2, Opcode: 0x74,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rax + 0xc] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	cmp	eax, dword ptr [rbp - 0x1c] # Size:3, Opcode: 0x3b,0x00,0x00,0x00
	jae	.label_12 # Size:2, Opcode: 0x73,0x00,0x00,0x00
	mov	edi, 0xffffe001 # Size:5, Opcode: 0xbf,0x00,0x00,0x00
	call	PORT_SetError # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	mov	eax, 0xffffffff # Size:5, Opcode: 0xb8,0x00,0x00,0x00
	jmp	.label_11 # Size:5, Opcode: 0xe9,0x00,0x00,0x00
.label_12:
	mov	eax, 0 # Size:5, Opcode: 0xb8,0x00,0x00,0x00
	jmp	.label_11 # Size:5, Opcode: 0xe9,0x00,0x00,0x00
.label_13:
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rax + 8] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	lea	edx, dword ptr [rax + 0x400] # Size:6, Opcode: 0x8d,0x00,0x00,0x00
	mov	eax, dword ptr [rbp - 0x1c] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	cmp	edx, eax # Size:2, Opcode: 0x39,0x00,0x00,0x00
	cmovae	eax, edx # Size:3, Opcode: 0x0f,0x43,0x00,0x00
	mov	dword ptr [rbp - 0x1c], eax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rax + 0xc] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	cmp	eax, dword ptr [rbp - 0x1c] # Size:3, Opcode: 0x3b,0x00,0x00,0x00
	jae	.label_14 # Size:2, Opcode: 0x73,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rax] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	test	rax, rax # Size:3, Opcode: 0x85,0x00,0x00,0x00
	je	.label_15 # Size:2, Opcode: 0x74,0x00,0x00,0x00
	mov	edx, dword ptr [rbp - 0x1c] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rax] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rsi, rdx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rdi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	PORT_Realloc # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	mov	qword ptr [rbp - 8], rax # Size:4, Opcode: 0x89,0x00,0x00,0x00
	jmp	.label_16 # Size:2, Opcode: 0xeb,0x00,0x00,0x00
.label_15:
	mov	eax, dword ptr [rbp - 0x1c] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rdi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	PORT_Alloc # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	mov	qword ptr [rbp - 8], rax # Size:4, Opcode: 0x89,0x00,0x00,0x00
.label_16:
	cmp	qword ptr [rbp - 8], 0 # Size:5, Opcode: 0x83,0x00,0x00,0x00
	jne	.label_10 # Size:2, Opcode: 0x75,0x00,0x00,0x00
	mov	eax, 0xffffffff # Size:5, Opcode: 0xb8,0x00,0x00,0x00
	jmp	.label_11 # Size:2, Opcode: 0xeb,0x00,0x00,0x00
.label_10:
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rdx, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	qword ptr [rax], rdx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rbp - 0x1c] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	dword ptr [rax + 0xc], edx # Size:3, Opcode: 0x89,0x00,0x00,0x00
.label_14:
	mov	eax, 0 # Size:5, Opcode: 0xb8,0x00,0x00,0x00
.label_11:
	leave	 # Size:1, Opcode: 0xc9,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00

	.section	.text
	.align	16
	.globl sslBuffer_Append
	.type sslBuffer_Append, @function
sslBuffer_Append:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	sub	rsp, 0x30 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x18], rdi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x20], rsi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	dword ptr [rbp - 0x24], edx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rax + 8] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rbp - 0x24] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	add	edx, eax # Size:2, Opcode: 0x01,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	esi, edx # Size:2, Opcode: 0x89,0x00,0x00,0x00
	mov	rdi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	sslBuffer_Grow # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	mov	dword ptr [rbp - 4], eax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	cmp	dword ptr [rbp - 4], 0 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	je	.label_17 # Size:2, Opcode: 0x74,0x00,0x00,0x00
	mov	eax, 0xffffffff # Size:5, Opcode: 0xb8,0x00,0x00,0x00
	jmp	.label_18 # Size:2, Opcode: 0xeb,0x00,0x00,0x00
.label_17:
	mov	edx, dword ptr [rbp - 0x24] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rcx, qword ptr [rax] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rax + 8] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, eax # Size:2, Opcode: 0x89,0x00,0x00,0x00
	add	rcx, rax # Size:3, Opcode: 0x01,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x20] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rsi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rdi, rcx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	memcpy # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rax + 8] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rbp - 0x24] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	add	edx, eax # Size:2, Opcode: 0x01,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	dword ptr [rax + 8], edx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	eax, 0 # Size:5, Opcode: 0xb8,0x00,0x00,0x00
.label_18:
	leave	 # Size:1, Opcode: 0xc9,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00

	.section	.text
	.align	16
	.globl sslBuffer_AppendNumber
	.type sslBuffer_AppendNumber, @function
sslBuffer_AppendNumber:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	sub	rsp, 0x30 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x18], rdi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x20], rsi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	dword ptr [rbp - 0x24], edx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rax + 8] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rbp - 0x24] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	add	edx, eax # Size:2, Opcode: 0x01,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	esi, edx # Size:2, Opcode: 0x89,0x00,0x00,0x00
	mov	rdi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	sslBuffer_Grow # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	mov	dword ptr [rbp - 4], eax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	cmp	dword ptr [rbp - 4], 0 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	je	.label_19 # Size:2, Opcode: 0x74,0x00,0x00,0x00
	mov	eax, 0xffffffff # Size:5, Opcode: 0xb8,0x00,0x00,0x00
	jmp	.label_20 # Size:2, Opcode: 0xeb,0x00,0x00,0x00
.label_19:
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rdx, qword ptr [rax] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rax + 8] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, eax # Size:2, Opcode: 0x89,0x00,0x00,0x00
	lea	rcx, qword ptr [rdx + rax] # Size:4, Opcode: 0x8d,0x00,0x00,0x00
	mov	edx, dword ptr [rbp - 0x24] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x20] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rsi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rdi, rcx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	ssl_EncodeUintX # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rax + 8] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rbp - 0x24] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	add	edx, eax # Size:2, Opcode: 0x01,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	dword ptr [rax + 8], edx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	eax, 0 # Size:5, Opcode: 0xb8,0x00,0x00,0x00
.label_20:
	leave	 # Size:1, Opcode: 0xc9,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00

	.section	.text
	.align	16
	.globl sslBuffer_AppendVariable
	.type sslBuffer_AppendVariable, @function
sslBuffer_AppendVariable:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	sub	rsp, 0x20 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	mov	qword ptr [rbp - 8], rdi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x10], rsi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	dword ptr [rbp - 0x14], edx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	dword ptr [rbp - 0x18], ecx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	edx, dword ptr [rbp - 0x14] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rbp - 0x18] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	shl	eax, 3 # Size:3, Opcode: 0xc1,0x00,0x00,0x00
	mov	ecx, eax # Size:2, Opcode: 0x89,0x00,0x00,0x00
	shr	rdx, cl # Size:3, Opcode: 0xd3,0x00,0x00,0x00
	mov	rax, rdx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	test	rax, rax # Size:3, Opcode: 0x85,0x00,0x00,0x00
	je	.label_24 # Size:2, Opcode: 0x74,0x00,0x00,0x00
	mov	edi, 0xffffe001 # Size:5, Opcode: 0xbf,0x00,0x00,0x00
	call	PORT_SetError # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	mov	eax, 0xffffffff # Size:5, Opcode: 0xb8,0x00,0x00,0x00
	jmp	.label_22 # Size:5, Opcode: 0xe9,0x00,0x00,0x00
.label_24:
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rax + 8] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rbp - 0x14] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	add	edx, eax # Size:2, Opcode: 0x01,0x00,0x00,0x00
	mov	eax, dword ptr [rbp - 0x18] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	add	edx, eax # Size:2, Opcode: 0x01,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	esi, edx # Size:2, Opcode: 0x89,0x00,0x00,0x00
	mov	rdi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	sslBuffer_Grow # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	test	eax, eax # Size:2, Opcode: 0x85,0x00,0x00,0x00
	je	.label_23 # Size:2, Opcode: 0x74,0x00,0x00,0x00
	mov	eax, 0xffffffff # Size:5, Opcode: 0xb8,0x00,0x00,0x00
	jmp	.label_22 # Size:2, Opcode: 0xeb,0x00,0x00,0x00
.label_23:
	mov	eax, dword ptr [rbp - 0x14] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rdx, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rcx, qword ptr [rdx] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rdx, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rdx + 8] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, edx # Size:2, Opcode: 0x89,0x00,0x00,0x00
	add	rcx, rdx # Size:3, Opcode: 0x01,0x00,0x00,0x00
	mov	edx, dword ptr [rbp - 0x18] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rsi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rdi, rcx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	ssl_EncodeUintX # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rax + 8] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rbp - 0x18] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	add	edx, eax # Size:2, Opcode: 0x01,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	dword ptr [rax + 8], edx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	cmp	dword ptr [rbp - 0x14], 0 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	je	.label_21 # Size:2, Opcode: 0x74,0x00,0x00,0x00
	mov	edx, dword ptr [rbp - 0x14] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rcx, qword ptr [rax] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rax + 8] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, eax # Size:2, Opcode: 0x89,0x00,0x00,0x00
	add	rcx, rax # Size:3, Opcode: 0x01,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x10] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rsi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rdi, rcx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	memcpy # Size:5, Opcode: 0xe8,0x00,0x00,0x00
.label_21:
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rax + 8] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rbp - 0x14] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	add	edx, eax # Size:2, Opcode: 0x01,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	dword ptr [rax + 8], edx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	eax, 0 # Size:5, Opcode: 0xb8,0x00,0x00,0x00
.label_22:
	leave	 # Size:1, Opcode: 0xc9,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00

	.section	.text
	.align	16
	.globl sslBuffer_AppendBuffer
	.type sslBuffer_AppendBuffer, @function
sslBuffer_AppendBuffer:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	sub	rsp, 0x10 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	mov	qword ptr [rbp - 8], rdi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x10], rsi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x10] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rax + 8] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x10] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rcx, qword ptr [rax] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rsi, rcx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rdi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	sslBuffer_Append # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	leave	 # Size:1, Opcode: 0xc9,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00

	.section	.text
	.align	16
	.globl sslBuffer_AppendBufferVariable
	.type sslBuffer_AppendBufferVariable, @function
sslBuffer_AppendBufferVariable:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	sub	rsp, 0x20 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	mov	qword ptr [rbp - 8], rdi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x10], rsi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	dword ptr [rbp - 0x14], edx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x10] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rax + 8] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x10] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rsi, qword ptr [rax] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	ecx, dword ptr [rbp - 0x14] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rdi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	sslBuffer_AppendVariable # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	leave	 # Size:1, Opcode: 0xc9,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00

	.section	.text
	.align	16
	.globl sslBuffer_Skip
	.type sslBuffer_Skip, @function
sslBuffer_Skip:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	sub	rsp, 0x20 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	mov	qword ptr [rbp - 8], rdi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	dword ptr [rbp - 0xc], esi # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x18], rdx # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rax + 8] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rbp - 0xc] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	add	edx, eax # Size:2, Opcode: 0x01,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	esi, edx # Size:2, Opcode: 0x89,0x00,0x00,0x00
	mov	rdi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	sslBuffer_Grow # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	test	eax, eax # Size:2, Opcode: 0x85,0x00,0x00,0x00
	je	.label_25 # Size:2, Opcode: 0x74,0x00,0x00,0x00
	mov	eax, 0xffffffff # Size:5, Opcode: 0xb8,0x00,0x00,0x00
	jmp	.label_26 # Size:2, Opcode: 0xeb,0x00,0x00,0x00
.label_25:
	cmp	qword ptr [rbp - 0x18], 0 # Size:5, Opcode: 0x83,0x00,0x00,0x00
	je	.label_27 # Size:2, Opcode: 0x74,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rax + 8] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	dword ptr [rax], edx # Size:2, Opcode: 0x89,0x00,0x00,0x00
.label_27:
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rax + 8] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rbp - 0xc] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	add	edx, eax # Size:2, Opcode: 0x01,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	dword ptr [rax + 8], edx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	eax, 0 # Size:5, Opcode: 0xb8,0x00,0x00,0x00
.label_26:
	leave	 # Size:1, Opcode: 0xc9,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00

	.section	.text
	.align	16
	.globl sslBuffer_InsertLength
	.type sslBuffer_InsertLength, @function
sslBuffer_InsertLength:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	sub	rsp, 0x20 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x18], rdi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	dword ptr [rbp - 0x1c], esi # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	dword ptr [rbp - 0x20], edx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rax + 8] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	ecx, dword ptr [rbp - 0x1c] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rbp - 0x20] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	add	edx, ecx # Size:2, Opcode: 0x01,0x00,0x00,0x00
	sub	eax, edx # Size:2, Opcode: 0x29,0x00,0x00,0x00
	mov	dword ptr [rbp - 4], eax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	edx, dword ptr [rbp - 4] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rbp - 0x20] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	shl	eax, 3 # Size:3, Opcode: 0xc1,0x00,0x00,0x00
	mov	ecx, eax # Size:2, Opcode: 0x89,0x00,0x00,0x00
	shr	rdx, cl # Size:3, Opcode: 0xd3,0x00,0x00,0x00
	mov	rax, rdx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	test	rax, rax # Size:3, Opcode: 0x85,0x00,0x00,0x00
	je	.label_28 # Size:2, Opcode: 0x74,0x00,0x00,0x00
	mov	edi, 0xffffe001 # Size:5, Opcode: 0xbf,0x00,0x00,0x00
	call	PORT_SetError # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	mov	eax, 0xffffffff # Size:5, Opcode: 0xb8,0x00,0x00,0x00
	jmp	.label_29 # Size:2, Opcode: 0xeb,0x00,0x00,0x00
.label_28:
	mov	eax, dword ptr [rbp - 4] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rdx, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rcx, qword ptr [rdx] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rbp - 0x1c] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	add	rcx, rdx # Size:3, Opcode: 0x01,0x00,0x00,0x00
	mov	edx, dword ptr [rbp - 0x20] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rsi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rdi, rcx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	ssl_EncodeUintX # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	mov	eax, 0 # Size:5, Opcode: 0xb8,0x00,0x00,0x00
.label_29:
	leave	 # Size:1, Opcode: 0xc9,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00

	.section	.text
	.align	16
	.globl sslBuffer_Clear
	.type sslBuffer_Clear, @function
sslBuffer_Clear:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	sub	rsp, 0x10 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	mov	qword ptr [rbp - 8], rdi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rax + 0x10] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	test	eax, eax # Size:2, Opcode: 0x85,0x00,0x00,0x00
	jne	.label_31 # Size:2, Opcode: 0x75,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rax] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	test	rax, rax # Size:3, Opcode: 0x85,0x00,0x00,0x00
	je	.label_30 # Size:2, Opcode: 0x74,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rax] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rdi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	PORT_Free # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	qword ptr [rax], 0 # Size:7, Opcode: 0xc7,0x00,0x00,0x00
.label_30:
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	dword ptr [rax + 0xc], 0 # Size:7, Opcode: 0xc7,0x00,0x00,0x00
.label_31:
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	dword ptr [rax + 8], 0 # Size:7, Opcode: 0xc7,0x00,0x00,0x00
	nop	 # Size:1, Opcode: 0x90,0x00,0x00,0x00
	leave	 # Size:1, Opcode: 0xc9,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00

	.section	.text
	.align	16
	.globl sslRead_Read
	.type sslRead_Read, @function
sslRead_Read:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	sub	rsp, 0x20 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	mov	qword ptr [rbp - 8], rdi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	dword ptr [rbp - 0xc], esi # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x18], rdx # Size:4, Opcode: 0x89,0x00,0x00,0x00
	cmp	qword ptr [rbp - 8], 0 # Size:5, Opcode: 0x83,0x00,0x00,0x00
	je	.label_33 # Size:2, Opcode: 0x74,0x00,0x00,0x00
	cmp	qword ptr [rbp - 0x18], 0 # Size:5, Opcode: 0x83,0x00,0x00,0x00
	jne	.label_32 # Size:2, Opcode: 0x75,0x00,0x00,0x00
.label_33:
	mov	edi, 0xffffe005 # Size:5, Opcode: 0xbf,0x00,0x00,0x00
	call	PORT_SetError # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	mov	eax, 0xffffffff # Size:5, Opcode: 0xb8,0x00,0x00,0x00
	jmp	.label_35 # Size:2, Opcode: 0xeb,0x00,0x00,0x00
.label_32:
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rax + 8] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rax + 0x10] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	cmp	edx, eax # Size:2, Opcode: 0x39,0x00,0x00,0x00
	jb	.label_36 # Size:2, Opcode: 0x72,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rax + 8] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rax + 0x10] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	sub	edx, eax # Size:2, Opcode: 0x29,0x00,0x00,0x00
	mov	eax, edx # Size:2, Opcode: 0x89,0x00,0x00,0x00
	cmp	eax, dword ptr [rbp - 0xc] # Size:3, Opcode: 0x3b,0x00,0x00,0x00
	jae	.label_34 # Size:2, Opcode: 0x73,0x00,0x00,0x00
.label_36:
	mov	edi, 0xffffe002 # Size:5, Opcode: 0xbf,0x00,0x00,0x00
	call	PORT_SetError # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	mov	eax, 0xffffffff # Size:5, Opcode: 0xb8,0x00,0x00,0x00
	jmp	.label_35 # Size:2, Opcode: 0xeb,0x00,0x00,0x00
.label_34:
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rdx, qword ptr [rax] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rax + 0x10] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, eax # Size:2, Opcode: 0x89,0x00,0x00,0x00
	add	rdx, rax # Size:3, Opcode: 0x01,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	qword ptr [rax], rdx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rbp - 0xc] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	dword ptr [rax + 8], edx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rax + 0x10] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rbp - 0xc] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	add	edx, eax # Size:2, Opcode: 0x01,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	dword ptr [rax + 0x10], edx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	eax, 0 # Size:5, Opcode: 0xb8,0x00,0x00,0x00
.label_35:
	leave	 # Size:1, Opcode: 0xc9,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00

	.section	.text
	.align	16
	.globl sslRead_ReadVariable
	.type sslRead_ReadVariable, @function
sslRead_ReadVariable:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	sub	rsp, 0x40 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x28], rdi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	dword ptr [rbp - 0x2c], esi # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x38], rdx # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr fs:[0x28] # Size:9, Opcode: 0x8b,0x00,0x00,0x00
	mov	qword ptr [rbp - 8], rax # Size:4, Opcode: 0x89,0x00,0x00,0x00
	xor	eax, eax # Size:2, Opcode: 0x31,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x10], 0 # Size:8, Opcode: 0xc7,0x00,0x00,0x00
	lea	rdx, qword ptr [rbp - 0x10] # Size:4, Opcode: 0x8d,0x00,0x00,0x00
	mov	ecx, dword ptr [rbp - 0x2c] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x28] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	esi, ecx # Size:2, Opcode: 0x89,0x00,0x00,0x00
	mov	rdi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	sslRead_ReadNumber # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	mov	dword ptr [rbp - 0x14], eax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	cmp	dword ptr [rbp - 0x14], 0 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	je	.label_40 # Size:2, Opcode: 0x74,0x00,0x00,0x00
	mov	edi, 0xffffe002 # Size:5, Opcode: 0xbf,0x00,0x00,0x00
	call	PORT_SetError # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	mov	eax, 0xffffffff # Size:5, Opcode: 0xb8,0x00,0x00,0x00
	jmp	.label_38 # Size:2, Opcode: 0xeb,0x00,0x00,0x00
.label_40:
	mov	rax, qword ptr [rbp - 0x10] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	test	rax, rax # Size:3, Opcode: 0x85,0x00,0x00,0x00
	jne	.label_39 # Size:2, Opcode: 0x75,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x10] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, eax # Size:2, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x38] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	dword ptr [rax + 8], edx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	eax, 0 # Size:5, Opcode: 0xb8,0x00,0x00,0x00
	jmp	.label_38 # Size:2, Opcode: 0xeb,0x00,0x00,0x00
.label_39:
	mov	rax, qword ptr [rbp - 0x10] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	ecx, eax # Size:2, Opcode: 0x89,0x00,0x00,0x00
	mov	rdx, qword ptr [rbp - 0x38] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x28] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	esi, ecx # Size:2, Opcode: 0x89,0x00,0x00,0x00
	mov	rdi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	sslRead_Read # Size:5, Opcode: 0xe8,0x00,0x00,0x00
.label_38:
	mov	rsi, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	xor	rsi, qword ptr fs:[0x28] # Size:9, Opcode: 0x33,0x00,0x00,0x00
	je	.label_37 # Size:2, Opcode: 0x74,0x00,0x00,0x00
	call	__stack_chk_fail # Size:5, Opcode: 0xe8,0x00,0x00,0x00
.label_37:
	leave	 # Size:1, Opcode: 0xc9,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00

	.section	.text
	.align	16
	.globl sslRead_ReadNumber
	.type sslRead_ReadNumber, @function
sslRead_ReadNumber:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	sub	rsp, 0x30 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x18], rdi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	dword ptr [rbp - 0x1c], esi # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x28], rdx # Size:4, Opcode: 0x89,0x00,0x00,0x00
	cmp	qword ptr [rbp - 0x18], 0 # Size:5, Opcode: 0x83,0x00,0x00,0x00
	je	.label_47 # Size:2, Opcode: 0x74,0x00,0x00,0x00
	cmp	qword ptr [rbp - 0x28], 0 # Size:5, Opcode: 0x83,0x00,0x00,0x00
	jne	.label_45 # Size:2, Opcode: 0x75,0x00,0x00,0x00
.label_47:
	mov	edi, 0xffffe005 # Size:5, Opcode: 0xbf,0x00,0x00,0x00
	call	PORT_SetError # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	mov	eax, 0xffffffff # Size:5, Opcode: 0xb8,0x00,0x00,0x00
	jmp	.label_41 # Size:5, Opcode: 0xe9,0x00,0x00,0x00
.label_45:
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rax + 8] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rax + 0x10] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	cmp	edx, eax # Size:2, Opcode: 0x39,0x00,0x00,0x00
	jb	.label_44 # Size:2, Opcode: 0x72,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rax + 8] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rax + 0x10] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	sub	edx, eax # Size:2, Opcode: 0x29,0x00,0x00,0x00
	mov	eax, edx # Size:2, Opcode: 0x89,0x00,0x00,0x00
	cmp	eax, dword ptr [rbp - 0x1c] # Size:3, Opcode: 0x3b,0x00,0x00,0x00
	jb	.label_44 # Size:2, Opcode: 0x72,0x00,0x00,0x00
	cmp	dword ptr [rbp - 0x1c], 8 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	jbe	.label_46 # Size:2, Opcode: 0x76,0x00,0x00,0x00
.label_44:
	mov	edi, 0xffffe002 # Size:5, Opcode: 0xbf,0x00,0x00,0x00
	call	PORT_SetError # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	mov	eax, 0xffffffff # Size:5, Opcode: 0xb8,0x00,0x00,0x00
	jmp	.label_41 # Size:2, Opcode: 0xeb,0x00,0x00,0x00
.label_46:
	mov	qword ptr [rbp - 8], 0 # Size:8, Opcode: 0xc7,0x00,0x00,0x00
	mov	dword ptr [rbp - 0xc], 0 # Size:7, Opcode: 0xc7,0x00,0x00,0x00
	jmp	.label_43 # Size:2, Opcode: 0xeb,0x00,0x00,0x00
.label_42:
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	shl	rax, 8 # Size:4, Opcode: 0xc1,0x00,0x00,0x00
	mov	rsi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rdx, qword ptr [rax] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	ecx, dword ptr [rax + 0x10] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rbp - 0xc] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	add	eax, ecx # Size:2, Opcode: 0x01,0x00,0x00,0x00
	mov	eax, eax # Size:2, Opcode: 0x89,0x00,0x00,0x00
	add	rax, rdx # Size:3, Opcode: 0x01,0x00,0x00,0x00
	movzx	eax, byte ptr [rax] # Size:3, Opcode: 0x0f,0xb6,0x00,0x00
	movzx	eax, al # Size:3, Opcode: 0x0f,0xb6,0x00,0x00
	add	rax, rsi # Size:3, Opcode: 0x01,0x00,0x00,0x00
	mov	qword ptr [rbp - 8], rax # Size:4, Opcode: 0x89,0x00,0x00,0x00
	add	dword ptr [rbp - 0xc], 1 # Size:4, Opcode: 0x83,0x00,0x00,0x00
.label_43:
	mov	eax, dword ptr [rbp - 0xc] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	cmp	eax, dword ptr [rbp - 0x1c] # Size:3, Opcode: 0x3b,0x00,0x00,0x00
	jb	.label_42 # Size:2, Opcode: 0x72,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rax + 0x10] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rbp - 0x1c] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	add	edx, eax # Size:2, Opcode: 0x01,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	dword ptr [rax + 0x10], edx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x28] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rdx, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	qword ptr [rax], rdx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	eax, 0 # Size:5, Opcode: 0xb8,0x00,0x00,0x00
.label_41:
	leave	 # Size:1, Opcode: 0xc9,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00

	.section	.text
	.align	16
	.globl ssl3_AppendHandshake
	.type ssl3_AppendHandshake, @function
ssl3_AppendHandshake:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	sub	rsp, 0x30 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x18], rdi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x20], rsi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	dword ptr [rbp - 0x24], edx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x20] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	qword ptr [rbp - 8], rax # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rax + 0x10c] # Size:6, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rax + 0x108] # Size:6, Opcode: 0x8b,0x00,0x00,0x00
	sub	edx, eax # Size:2, Opcode: 0x29,0x00,0x00,0x00
	mov	eax, edx # Size:2, Opcode: 0x89,0x00,0x00,0x00
	mov	dword ptr [rbp - 0x10], eax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	cmp	dword ptr [rbp - 0x24], 0 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	jne	.label_56 # Size:2, Opcode: 0x75,0x00,0x00,0x00
	mov	eax, 0 # Size:5, Opcode: 0xb8,0x00,0x00,0x00
	jmp	.label_49 # Size:5, Opcode: 0xe9,0x00,0x00,0x00
.label_56:
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rax + 0x10c] # Size:6, Opcode: 0x8b,0x00,0x00,0x00
	cmp	eax, 0x7cff # Size:5, Opcode: 0x3d,0x00,0x00,0x00
	ja	.label_50 # Size:6, Opcode: 0x0f,0x87,0x00,0x00
	mov	eax, dword ptr [rbp - 0x10] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	cmp	eax, dword ptr [rbp - 0x24] # Size:3, Opcode: 0x3b,0x00,0x00,0x00
	jae	.label_50 # Size:2, Opcode: 0x73,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rax + 0x108] # Size:6, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rbp - 0x24] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	add	eax, edx # Size:2, Opcode: 0x01,0x00,0x00,0x00
	cmp	eax, 0xf9f # Size:5, Opcode: 0x3d,0x00,0x00,0x00
	jbe	.label_52 # Size:2, Opcode: 0x76,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rax + 0x108] # Size:6, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rbp - 0x24] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	add	eax, edx # Size:2, Opcode: 0x01,0x00,0x00,0x00
	mov	edx, 0x7d00 # Size:5, Opcode: 0xba,0x00,0x00,0x00
	cmp	eax, 0x7d00 # Size:5, Opcode: 0x3d,0x00,0x00,0x00
	cmova	eax, edx # Size:3, Opcode: 0x0f,0x47,0x00,0x00
	jmp	.label_55 # Size:2, Opcode: 0xeb,0x00,0x00,0x00
.label_52:
	mov	eax, 0xfa0 # Size:5, Opcode: 0xb8,0x00,0x00,0x00
.label_55:
	mov	rdx, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	add	rdx, 0x100 # Size:7, Opcode: 0x81,0x00,0x00,0x00
	mov	esi, eax # Size:2, Opcode: 0x89,0x00,0x00,0x00
	mov	rdi, rdx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	sslBuffer_Grow # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	mov	dword ptr [rbp - 0xc], eax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	cmp	dword ptr [rbp - 0xc], 0 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	je	.label_48 # Size:2, Opcode: 0x74,0x00,0x00,0x00
	mov	eax, 0xffffffff # Size:5, Opcode: 0xb8,0x00,0x00,0x00
	jmp	.label_49 # Size:5, Opcode: 0xe9,0x00,0x00,0x00
.label_48:
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rax + 0x10c] # Size:6, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rax + 0x108] # Size:6, Opcode: 0x8b,0x00,0x00,0x00
	sub	edx, eax # Size:2, Opcode: 0x29,0x00,0x00,0x00
	mov	eax, edx # Size:2, Opcode: 0x89,0x00,0x00,0x00
	mov	dword ptr [rbp - 0x10], eax # Size:3, Opcode: 0x89,0x00,0x00,0x00
.label_50:
	mov	edx, dword ptr [rbp - 0x24] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rcx, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rsi, rcx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rdi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	ssl3_UpdateHandshakeHashes # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	mov	dword ptr [rbp - 0xc], eax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	cmp	dword ptr [rbp - 0xc], 0 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	je	.label_54 # Size:6, Opcode: 0x0f,0x84,0x00,0x00
	mov	eax, 0xffffffff # Size:5, Opcode: 0xb8,0x00,0x00,0x00
	jmp	.label_49 # Size:5, Opcode: 0xe9,0x00,0x00,0x00
.label_51:
	cmp	dword ptr [rbp - 0x10], 0 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	jle	.label_57 # Size:2, Opcode: 0x7e,0x00,0x00,0x00
	mov	eax, dword ptr [rbp - 0x10] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	movsxd	rdx, eax # Size:3, Opcode: 0x63,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rcx, qword ptr [rax + 0x100] # Size:7, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rax + 0x108] # Size:6, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, eax # Size:2, Opcode: 0x89,0x00,0x00,0x00
	add	rcx, rax # Size:3, Opcode: 0x01,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rsi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rdi, rcx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	memcpy # Size:5, Opcode: 0xe8,0x00,0x00,0x00
.label_57:
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rax + 0x108] # Size:6, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rbp - 0x10] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	add	edx, eax # Size:2, Opcode: 0x01,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	dword ptr [rax + 0x108], edx # Size:6, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	esi, 0x40000000 # Size:5, Opcode: 0xbe,0x00,0x00,0x00
	mov	rdi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	ssl3_FlushHandshake # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	mov	dword ptr [rbp - 0xc], eax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	cmp	dword ptr [rbp - 0xc], 0 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	je	.label_53 # Size:2, Opcode: 0x74,0x00,0x00,0x00
	mov	eax, 0xffffffff # Size:5, Opcode: 0xb8,0x00,0x00,0x00
	jmp	.label_49 # Size:2, Opcode: 0xeb,0x00,0x00,0x00
.label_53:
	mov	eax, dword ptr [rbp - 0x10] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	sub	dword ptr [rbp - 0x24], eax # Size:3, Opcode: 0x29,0x00,0x00,0x00
	mov	eax, dword ptr [rbp - 0x10] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	cdqe	 # Size:2, Opcode: 0x98,0x00,0x00,0x00
	add	qword ptr [rbp - 8], rax # Size:4, Opcode: 0x01,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rax + 0x10c] # Size:6, Opcode: 0x8b,0x00,0x00,0x00
	mov	dword ptr [rbp - 0x10], eax # Size:3, Opcode: 0x89,0x00,0x00,0x00
.label_54:
	mov	eax, dword ptr [rbp - 0x10] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	cmp	dword ptr [rbp - 0x24], eax # Size:3, Opcode: 0x39,0x00,0x00,0x00
	ja	.label_51 # Size:6, Opcode: 0x0f,0x87,0x00,0x00
	mov	edx, dword ptr [rbp - 0x24] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rcx, qword ptr [rax + 0x100] # Size:7, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rax + 0x108] # Size:6, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, eax # Size:2, Opcode: 0x89,0x00,0x00,0x00
	add	rcx, rax # Size:3, Opcode: 0x01,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rsi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rdi, rcx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	memcpy # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rax + 0x108] # Size:6, Opcode: 0x8b,0x00,0x00,0x00
	mov	eax, dword ptr [rbp - 0x24] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	add	edx, eax # Size:2, Opcode: 0x01,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	dword ptr [rax + 0x108], edx # Size:6, Opcode: 0x89,0x00,0x00,0x00
	mov	eax, 0 # Size:5, Opcode: 0xb8,0x00,0x00,0x00
.label_49:
	leave	 # Size:1, Opcode: 0xc9,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00

	.section	.text
	.align	16
	.globl ssl3_AppendHandshakeNumber
	.type ssl3_AppendHandshakeNumber, @function
ssl3_AppendHandshakeNumber:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	sub	rsp, 0x30 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x18], rdi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x20], rsi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	dword ptr [rbp - 0x24], edx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr fs:[0x28] # Size:9, Opcode: 0x8b,0x00,0x00,0x00
	mov	qword ptr [rbp - 8], rax # Size:4, Opcode: 0x89,0x00,0x00,0x00
	xor	eax, eax # Size:2, Opcode: 0x31,0x00,0x00,0x00
	mov	edx, dword ptr [rbp - 0x24] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rcx, qword ptr [rbp - 0x20] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	lea	rax, qword ptr [rbp - 0x10] # Size:4, Opcode: 0x8d,0x00,0x00,0x00
	mov	rsi, rcx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rdi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	ssl_EncodeUintX # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	mov	edx, dword ptr [rbp - 0x24] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	lea	rcx, qword ptr [rbp - 0x10] # Size:4, Opcode: 0x8d,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rsi, rcx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rdi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	ssl3_AppendHandshake # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	mov	rsi, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	xor	rsi, qword ptr fs:[0x28] # Size:9, Opcode: 0x33,0x00,0x00,0x00
	je	.label_58 # Size:2, Opcode: 0x74,0x00,0x00,0x00
	call	__stack_chk_fail # Size:5, Opcode: 0xe8,0x00,0x00,0x00
.label_58:
	leave	 # Size:1, Opcode: 0xc9,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00

	.section	.text
	.align	16
	.globl ssl3_AppendHandshakeVariable
	.type ssl3_AppendHandshakeVariable, @function
ssl3_AppendHandshakeVariable:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	sub	rsp, 0x30 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x18], rdi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x20], rsi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	dword ptr [rbp - 0x24], edx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	dword ptr [rbp - 0x28], ecx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	ecx, dword ptr [rbp - 0x24] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rbp - 0x28] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rsi, rcx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rdi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	ssl3_AppendHandshakeNumber # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	mov	dword ptr [rbp - 4], eax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	cmp	dword ptr [rbp - 4], 0 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	je	.label_59 # Size:2, Opcode: 0x74,0x00,0x00,0x00
	mov	eax, 0xffffffff # Size:5, Opcode: 0xb8,0x00,0x00,0x00
	jmp	.label_60 # Size:2, Opcode: 0xeb,0x00,0x00,0x00
.label_59:
	mov	edx, dword ptr [rbp - 0x24] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rcx, qword ptr [rbp - 0x20] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rsi, rcx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rdi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	ssl3_AppendHandshake # Size:5, Opcode: 0xe8,0x00,0x00,0x00
.label_60:
	leave	 # Size:1, Opcode: 0xc9,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00

	.section	.text
	.align	16
	.globl ssl3_AppendBufferToHandshake
	.type ssl3_AppendBufferToHandshake, @function
ssl3_AppendBufferToHandshake:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	sub	rsp, 0x10 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	mov	qword ptr [rbp - 8], rdi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x10], rsi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x10] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rax + 8] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x10] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rcx, qword ptr [rax] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rsi, rcx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rdi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	ssl3_AppendHandshake # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	leave	 # Size:1, Opcode: 0xc9,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00

	.section	.text
	.align	16
	.globl ssl3_AppendBufferToHandshakeVariable
	.type ssl3_AppendBufferToHandshakeVariable, @function
ssl3_AppendBufferToHandshakeVariable:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	sub	rsp, 0x20 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	mov	qword ptr [rbp - 8], rdi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x10], rsi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	dword ptr [rbp - 0x14], edx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x10] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, dword ptr [rax + 8] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x10] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rsi, qword ptr [rax] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	ecx, dword ptr [rbp - 0x14] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rdi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	ssl3_AppendHandshakeVariable # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	leave	 # Size:1, Opcode: 0xc9,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00

	.section	.text
	.align	16
	.globl PORT_Alloc
	.type PORT_Alloc, @function
PORT_Alloc:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	sub	rsp, 0x10 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	mov	qword ptr [rbp - 8], rdi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rdi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	malloc # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	leave	 # Size:1, Opcode: 0xc9,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00

	.section	.text
	.align	16
	.globl PORT_Realloc
	.type PORT_Realloc, @function
PORT_Realloc:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	sub	rsp, 0x10 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	mov	qword ptr [rbp - 8], rdi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x10], rsi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	rdx, qword ptr [rbp - 0x10] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rsi, rdx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	rdi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	realloc # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	leave	 # Size:1, Opcode: 0xc9,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00

	.section	.text
	.align	16
	.globl PORT_Free
	.type PORT_Free, @function
PORT_Free:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	sub	rsp, 0x10 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	mov	qword ptr [rbp - 8], rdi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rdi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	free # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	nop	 # Size:1, Opcode: 0x90,0x00,0x00,0x00
	leave	 # Size:1, Opcode: 0xc9,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00

	.section	.text
	.align	16
	.globl PR_htonll
	.type PR_htonll, @function
PR_htonll:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	qword ptr [rbp - 8], rdi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	pop	rbp # Size:1, Opcode: 0x5d,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00

	.section	.text
	.align	16
	.globl PORT_SetError
	.type PORT_SetError, @function
PORT_SetError:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	dword ptr [rbp - 4], edi # Size:3, Opcode: 0x89,0x00,0x00,0x00
	nop	 # Size:1, Opcode: 0x90,0x00,0x00,0x00
	pop	rbp # Size:1, Opcode: 0x5d,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00

	.section	.text
	.align	16
	.globl main
	.type main, @function
main:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	eax, 0 # Size:5, Opcode: 0xb8,0x00,0x00,0x00
	pop	rbp # Size:1, Opcode: 0x5d,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00

	.section	.text
	.align	16
	.globl ssl3_FlushHandshake
	.type ssl3_FlushHandshake, @function
ssl3_FlushHandshake:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	qword ptr [rbp - 8], rdi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	dword ptr [rbp - 0xc], esi # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	eax, 0 # Size:5, Opcode: 0xb8,0x00,0x00,0x00
	pop	rbp # Size:1, Opcode: 0x5d,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00

	.section	.text
	.align	16
	.globl ssl3_UpdateHandshakeHashes
	.type ssl3_UpdateHandshakeHashes, @function
ssl3_UpdateHandshakeHashes:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	qword ptr [rbp - 8], rdi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x10], rsi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	dword ptr [rbp - 0x14], edx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	eax, 0 # Size:5, Opcode: 0xb8,0x00,0x00,0x00
	pop	rbp # Size:1, Opcode: 0x5d,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00


	.section .rodata
	.align 16
	.byte 1
	.byte 0
	.byte 2
	.byte 0

	.section .data
	.align 8
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0

	.section .bss
	.align 8
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_3:
	.byte 0
		.globl _end
	.type _end, @notype
_end:
