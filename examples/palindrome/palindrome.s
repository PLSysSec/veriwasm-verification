	.intel_syntax noprefix

	.section	.text
	.align	32
	.globl strncmp
	.type strncmp, @function
strncmp:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x18], rdi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x20], rsi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x28], rdx # Size:4, Opcode: 0x89,0x00,0x00,0x00
	jmp	.label_13 # Size:2, Opcode: 0xeb,0x00,0x00,0x00
.label_14:
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	lea	rdx, qword ptr [rax + 1] # Size:4, Opcode: 0x8d,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x18], rdx # Size:4, Opcode: 0x89,0x00,0x00,0x00
	movzx	eax, byte ptr [rax] # Size:3, Opcode: 0x0f,0xb6,0x00,0x00
	mov	byte ptr [rbp - 2], al # Size:3, Opcode: 0x88,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x20] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	lea	rdx, qword ptr [rax + 1] # Size:4, Opcode: 0x8d,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x20], rdx # Size:4, Opcode: 0x89,0x00,0x00,0x00
	movzx	eax, byte ptr [rax] # Size:3, Opcode: 0x0f,0xb6,0x00,0x00
	mov	byte ptr [rbp - 1], al # Size:3, Opcode: 0x88,0x00,0x00,0x00
	movzx	eax, byte ptr [rbp - 2] # Size:4, Opcode: 0x0f,0xb6,0x00,0x00
	cmp	al, byte ptr [rbp - 1] # Size:3, Opcode: 0x3a,0x00,0x00,0x00
	je	.label_9 # Size:2, Opcode: 0x74,0x00,0x00,0x00
	movzx	eax, byte ptr [rbp - 2] # Size:4, Opcode: 0x0f,0xb6,0x00,0x00
	cmp	al, byte ptr [rbp - 1] # Size:3, Opcode: 0x3a,0x00,0x00,0x00
	jae	.label_12 # Size:2, Opcode: 0x73,0x00,0x00,0x00
	mov	eax, 0xffffffff # Size:5, Opcode: 0xb8,0x00,0x00,0x00
	jmp	.label_15 # Size:2, Opcode: 0xeb,0x00,0x00,0x00
.label_12:
	mov	eax, 1 # Size:5, Opcode: 0xb8,0x00,0x00,0x00
	jmp	.label_15 # Size:2, Opcode: 0xeb,0x00,0x00,0x00
.label_9:
	cmp	byte ptr [rbp - 2], 0 # Size:4, Opcode: 0x80,0x00,0x00,0x00
	jne	.label_10 # Size:2, Opcode: 0x75,0x00,0x00,0x00
	jmp	.label_11 # Size:2, Opcode: 0xeb,0x00,0x00,0x00
.label_10:
	sub	qword ptr [rbp - 0x28], 1 # Size:5, Opcode: 0x83,0x00,0x00,0x00
.label_13:
	cmp	qword ptr [rbp - 0x28], 0 # Size:5, Opcode: 0x83,0x00,0x00,0x00
	jne	.label_14 # Size:2, Opcode: 0x75,0x00,0x00,0x00
.label_11:
	mov	eax, 0 # Size:5, Opcode: 0xb8,0x00,0x00,0x00
.label_15:
	pop	rbp # Size:1, Opcode: 0x5d,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00

	.section	.text
	.align	32
	.globl strlen
	.type strlen, @function
strlen:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x18], rdi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	qword ptr [rbp - 8], rax # Size:4, Opcode: 0x89,0x00,0x00,0x00
	jmp	.label_17 # Size:2, Opcode: 0xeb,0x00,0x00,0x00
.label_16:
	add	qword ptr [rbp - 8], 1 # Size:5, Opcode: 0x83,0x00,0x00,0x00
.label_17:
	mov	rax, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	movzx	eax, byte ptr [rax] # Size:3, Opcode: 0x0f,0xb6,0x00,0x00
	test	al, al # Size:2, Opcode: 0x84,0x00,0x00,0x00
	jne	.label_16 # Size:2, Opcode: 0x75,0x00,0x00,0x00
	mov	rdx, qword ptr [rbp - 8] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	sub	rdx, rax # Size:3, Opcode: 0x29,0x00,0x00,0x00
	mov	rax, rdx # Size:3, Opcode: 0x89,0x00,0x00,0x00
	pop	rbp # Size:1, Opcode: 0x5d,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00

	.section	.text
	.align	32
	.globl is_palindrome
	.type is_palindrome, @function
is_palindrome:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	sub	rsp, 0x18 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x18], rdi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	mov	rdi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	strlen # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	mov	dword ptr [rbp - 4], eax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	dword ptr [rbp - 8], 0 # Size:7, Opcode: 0xc7,0x00,0x00,0x00
	jmp	.label_19 # Size:2, Opcode: 0xeb,0x00,0x00,0x00
.label_20:
	mov	eax, dword ptr [rbp - 8] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	movsxd	rdx, eax # Size:3, Opcode: 0x63,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	add	rax, rdx # Size:3, Opcode: 0x01,0x00,0x00,0x00
	movzx	edx, byte ptr [rax] # Size:3, Opcode: 0x0f,0xb6,0x00,0x00
	mov	eax, dword ptr [rbp - 4] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	sub	eax, dword ptr [rbp - 8] # Size:3, Opcode: 0x2b,0x00,0x00,0x00
	cdqe	 # Size:2, Opcode: 0x98,0x00,0x00,0x00
	lea	rcx, qword ptr [rax - 1] # Size:4, Opcode: 0x8d,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x18] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	add	rax, rcx # Size:3, Opcode: 0x01,0x00,0x00,0x00
	movzx	eax, byte ptr [rax] # Size:3, Opcode: 0x0f,0xb6,0x00,0x00
	cmp	dl, al # Size:2, Opcode: 0x38,0x00,0x00,0x00
	je	.label_21 # Size:2, Opcode: 0x74,0x00,0x00,0x00
	mov	eax, 0 # Size:5, Opcode: 0xb8,0x00,0x00,0x00
	jmp	.label_18 # Size:2, Opcode: 0xeb,0x00,0x00,0x00
.label_21:
	add	dword ptr [rbp - 8], 1 # Size:4, Opcode: 0x83,0x00,0x00,0x00
.label_19:
	mov	eax, dword ptr [rbp - 4] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	edx, eax # Size:2, Opcode: 0x89,0x00,0x00,0x00
	shr	edx, 0x1f # Size:3, Opcode: 0xc1,0x00,0x00,0x00
	add	eax, edx # Size:2, Opcode: 0x01,0x00,0x00,0x00
	sar	eax, 1 # Size:2, Opcode: 0xd1,0x00,0x00,0x00
	cmp	eax, dword ptr [rbp - 8] # Size:3, Opcode: 0x3b,0x00,0x00,0x00
	jg	.label_20 # Size:2, Opcode: 0x7f,0x00,0x00,0x00
	mov	eax, 1 # Size:5, Opcode: 0xb8,0x00,0x00,0x00
.label_18:
	leave	 # Size:1, Opcode: 0xc9,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00

	.section	.text
	.align	32
	.globl main
	.type main, @function
main:
	push	rbp # Size:1, Opcode: 0x55,0x00,0x00,0x00
	mov	rbp, rsp # Size:3, Opcode: 0x89,0x00,0x00,0x00
	sub	rsp, 0x10 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	mov	dword ptr [rbp - 4], edi # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	qword ptr [rbp - 0x10], rsi # Size:4, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x10] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	add	rax, 8 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	mov	rax, qword ptr [rax] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rdi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	call	is_palindrome # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	mov	edx, eax # Size:2, Opcode: 0x89,0x00,0x00,0x00
	mov	rax, qword ptr [rbp - 0x10] # Size:4, Opcode: 0x8b,0x00,0x00,0x00
	add	rax, 8 # Size:4, Opcode: 0x83,0x00,0x00,0x00
	mov	rax, qword ptr [rax] # Size:3, Opcode: 0x8b,0x00,0x00,0x00
	mov	rsi, rax # Size:3, Opcode: 0x89,0x00,0x00,0x00
	mov	edi, OFFSET FLAT:label_22 # Size:5, Opcode: 0xbf,0x00,0x00,0x00
	mov	eax, 0 # Size:5, Opcode: 0xb8,0x00,0x00,0x00
	call	printf # Size:5, Opcode: 0xe8,0x00,0x00,0x00
	mov	eax, 0 # Size:5, Opcode: 0xb8,0x00,0x00,0x00
	leave	 # Size:1, Opcode: 0xc9,0x00,0x00,0x00
	ret	 # Size:1, Opcode: 0xc3,0x00,0x00,0x00


	.section .rodata
	.align 32
	.byte 1
	.byte 0
	.byte 2
	.byte 0
label_22:
	.byte 105
	.byte 115
	.byte 95
	.byte 112
	.byte 97
	.byte 108
	.byte 105
	.byte 110
	.byte 100
	.byte 114
	.byte 111
	.byte 109
	.byte 101
	.byte 40
	.byte 37
	.byte 115
	.byte 41
	.byte 32
	.byte 61
	.byte 32
	.byte 37
	.byte 100
	.byte 10
	.byte 0

	.section .data
	.align 8
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0

	.section .bss
	.align 8
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_3:
	.byte 0
		.globl _end
	.type _end, @notype
_end:

