(mov rh, imm8) -> (OP1 = OP1[63:16] o OP2[7:0] o OP1[7:0])
(mov rh, rh) -> (OP1 = OP1[63:16] o OP2[15:8] o OP1[7:0])
(mov rh, r8) -> (OP1 = OP1[63:16] o OP2[7:0] o OP1[7:0])
(mov rh, m8) -> (OP1 = OP1[63:16] o OP2[7:0] o OP1[7:0])
(mov r8, imm8) -> (OP1 = OP1[63:8] o OP2[7:0])
(mov r8, rh) -> (OP1 = OP1[63:8] o OP2[15:8])
(mov r8, r8) -> (OP1 = OP1[63:8] o OP2[7:0])
(mov r8, m8) -> (OP1 = OP1[63:8] o OP2[7:0])
(mov m8, imm8) -> (OP1 = (OP1[63:8] o OP2[7:0])[7:0])
(mov m8, rh) -> (OP1 = (OP1[63:8] o OP2[15:8])[7:0])
(mov m8, r8) -> (OP1 = (OP1[63:8] o OP2[7:0])[7:0])
(mov r64, imm32) -> (OP1 = (sign-extend-64(OP2)))
(mov r64, imm64) -> (OP1 = OP2)
(mov r64, r64) -> (OP1 = OP2)
(mov r64, m64) -> (OP1 = OP2)
(mov m64, imm32) -> (OP1 = (sign-extend-64(OP2)))
(mov m64, r64) -> (OP1 = (OP2)[63:0])
(mov r16, imm16) -> (OP1 = OP1[63:16] o OP2[15:0])
(mov r16, r16) -> (OP1 = OP1[63:16] o OP2[15:0])
(mov r16, m16) -> (OP1 = OP1[63:16] o OP2[15:0])
(mov m16, imm16) -> (OP1 = (OP1[63:16] o OP2[15:0])[15:0])
(mov m16, r16) -> (OP1 = (OP1[63:16] o OP2[15:0])[15:0])
(mov r32, imm32) -> (OP1 = 0x0_32 o OP2[31:0])
(mov r32, r32) -> (OP1 = 0x0_32 o OP2[31:0])
(mov r32, m32) -> (OP1 = 0x0_32 o OP2[31:0])
(mov m32, imm32) -> (OP1 = (0x0_32 o OP2[31:0])[31:0])
(mov m32, r32) -> (OP1 = (0x0_32 o OP2[31:0])[31:0])
